<script>
  
  function formatDate(date) {
    const d = new Date(date);
    const day = String(d.getDate()).padStart(2, '0');
    const month = String(d.getMonth() + 1).padStart(2, '0'); 
    const year = d.getFullYear();
    
    return `${day}/${month}/${year}`;
  }

  // Crea el contenido de la tabla para solicitudes
  function createTableRequests(data) {
    const table = document.querySelector('#requests_table')
    let table_content = `<thead>
    <tr>
      <th >Name</th>
      <th >Start-date</th>
      <th >End-date</th>
      <th >Request-type</th>
      <th >Status</th>
      <th >Action</th>
    </tr>
  </thead>
  <tbody >`
    // Información por cada rengrlón de la tabla
    data.requests[0].forEach((d, idx) => {

      table_content += `<tr id='request' key='${idx}'>`;
      table_content += `<td>${d.nombre} ${d.apellidos}</td>`
      table_content += `<td>${formatDate(d.start)}</td>`
      table_content += `<td>${formatDate(d.end)}</td>`
      table_content += `<td>${d.tipo_falta}</td>`
      if (d.estado == 0) {
        table_content += `<td> <p class='status has-background-warning'>Pending...</p></td>
         <td>
            <form action="/requests" method="POST">
              <input type="hidden" name="_csrf" value="<%= csrfToken %>">
              <input type="hidden" name="id_solicitud_falta" value="${d.id_solicitud_falta}">
                <button type="submit" name="estado" value="1">
                  <i class="bi bi-check-circle is-size-5 is-clickable has-text-primary mr-4 accept-icon" data-id="${d.id}"></i>  
                </button>
                <button type="submit" name="estado" value="2">
                  <i class="bi bi-x-circle is-size-5 is-clickable has-text-danger deny-icon" data-id="${d.id}"></i>
                </button>
            </form>
          </td>
          </tr>`
      }
      else if (d.estado == 1) {
        table_content += `<td> <p class='status has-background-success'>Accepted</p></td>
        <td class="back"></td>
        </tr>
`
      }
      else if (d.estado == 2) {
        table_content += `<td> <p class='status has-background-danger'>Denied</p></td>
        </tr>`
      }
      // Contenido desplegable
      table_content += `<tr class="additional-row" id="additional-row-${idx}" style="display: none;">
                          <td colspan='6'>
                            <div class='columns'>
                              <div class="column">
                                <p><strong>Type: </strong>${d.tipo_falta}</p>
                                <p>Calendario...</p>
                              </div>
                              <div class="column">
                                <p><strong>Reason: </strong></p>
                                <p class='has-background-black p-3 box'>${d.descripcion}</p>
                                ${d.evidencia ? 'evidencia' : 'no hay evidencia'}
                              </div>
                              <div class="column">
                                <p><strong>Location:</strong></p>
                                <p class='is-underlined	'>${d.ubicacion}</p>
                              </div>
                            </div>
                          </td>
                        </tr>`;
    })
    table_content += '</tbody>'
    table.innerHTML = table_content

    // Añade función para expandir el contenido extra
    const entries = document.querySelectorAll('#request')
    entries.forEach((node, idx) => {
      node.addEventListener('click', (v) => {
        const additionalRow = document.getElementById(`additional-row-${idx}`)
        
        // hacer que en los botones de aceptar o rechazar no se expanda la vista
        // Si el elemento clickeado (v.target -> elemento exacto en el que ocurrió) tiene la clase "accept-icon" o "deny-icon", el código detiene la ejecución con return para que la fila no se expanda.
        if(v.target.classList.contains("accept-icon") || v.target.classList.contains("deny-icon")){
          return;
        }

        if (additionalRow.style.display === "none") {
          additionalRow.style.display = "table-row";
        } else {
          additionalRow.style.display = "none";
        }
      })
    })

  }

  // Consulta a db para la información de solicitudes
  const get_info = (pagination=0, filter=null) => {
    const csrf = document.getElementById('_csrf').value
    const selected_option = document.querySelector('.selected')
    const route = selected_option.innerHTML
    fetch(`/requests/${route}`, {
      method: 'POST',
      headers: {
            'Content-Type': 'application/json',
            'csrf-token': csrf
        },
      body: JSON.stringify({
        offset: pagination,
        filter: filter,
      }),
    })
    .then(response => response.json())
    .then(data => {
      createTableRequests(data)
    })
    .catch(e => console.log(e))
  }
  
  // Permite cambiar entre pestañas
  const options = document.querySelectorAll(".option")
  for (let i=0; i<options.length; i++) {
    options[i].addEventListener('click', (b) => {
      options.forEach((element) => {
        element.classList.remove('selected')
      })
      options[i].classList.add('selected')

      get_info()
    })
  }

  const prev_button = document.querySelector("#prev-page");
  const next_button = document.querySelector("#next-page");
  const pagination_value = document.querySelector("#pagination");

  // Cambiar de página / ver los siguientes 10 registros
  prev_button.addEventListener('click', () => {
    pagination_value.value = 
    pagination_value.value - 1 <= 1 ? 1 : pagination_value.value - 1
    
    pagination_value.dispatchEvent(new Event('change'));
  })

  next_button.addEventListener('click', () => {
    pagination_value.value = Number(pagination_value.value) + 1
    
    pagination_value.dispatchEvent(new Event('change'));
  })
  pagination_value.addEventListener('change', (v) => {
    get_info(pagination_value.value-1)
  })
</script>