<script src='https://cdn.jsdelivr.net/npm/fullcalendar/index.global.min.js'></script>
<link rel="stylesheet" href="/css/calendario">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>

  
  function formatDate(date) {
    const d = new Date(date);
    const day = String(d.getDate()).padStart(2, '0');
    const month = String(d.getMonth() + 1).padStart(2, '0'); 
    const year = d.getFullYear();
    
    return `${day}/${month}/${year}`;
  }

  function accept_deny(element) {
    // is checkmark
    if (element.classList.contains('bi-check-circle')) {
      console.log('Accept request')
    }
    else {
      console.log('Deny request')
    }
  }

  // Crea el contenido de la tabla para solicitudes
  function createTableRequests(data) {
    const table = document.querySelector('#requests_table')
    let table_content = `<thead>
    <tr>
      <th >Name</th>
      <th >Start-date</th>
      <th >End-date</th>
      <th >Request-type</th>
      <th >Status</th>
      <th >Action</th>
    </tr>
  </thead>
  <tbody >`
    // Información por cada renglón de la tabla
    data.requests[0].forEach((d, idx) => {
      console.log('datos',data.collab);
      table_content += `<tr id='request' key='${idx}'>`;
      table_content += `<td><i class="bi bi-caret-right-fill" id='caret'></i> ${d.nombre} ${d.apellidos}</td>`
      table_content += `<td>${formatDate(d.start)}</td>`
      table_content += `<td>${formatDate(d.end)}</td>`
      table_content += `<td>${d.tipo_falta}</td>`
      if (d.estado == 0 ) {
        table_content += `<td> <p class='status has-background-warning'>Pending...</p></td>
         <td>
            <button class="approve" type="submit" name="estado" data-id="${d.id_solicitud_falta}" value="${d.estado + 0.5}  ">
              <i class="bi bi-check-circle is-size-5 is-clickable has-text-primary mr-4 accept-icon" data-id="${d.id}"></i>  
            </button>
            <button class="approve" type="submit" name="estado" value="2" data-id="${d.id_solicitud_falta}">
              <i class="bi bi-x-circle is-size-5 is-clickable has-text-danger deny-icon" data-id="${d.id}"></i>
            </button>
          </td>
          </tr>`
      } else if (d.estado == 0.5) {
        table_content += `<td> <p class='status half-color-button'>Pending...</p></td>
         <td>
            <button class="approve" type="submit" name="estado" data-id="${d.id_solicitud_falta}" value="${d.estado + 0.5}  ">
              <i class="bi bi-check-circle is-size-5 is-clickable has-text-primary mr-4 accept-icon" data-id="${d.id}"></i>  
            </button>
            <button class="approve" type="submit" name="estado" value="2" data-id="${d.id_solicitud_falta}">
              <i class="bi bi-x-circle is-size-5 is-clickable has-text-danger deny-icon" data-id="${d.id}"></i>
            </button>
          </td>
          </tr>`
      }
      else if (d.estado == 1) {
        table_content += `<td> <p class='status has-background-success'>Accepted</p></td>
        <td class="back"></td>
        </tr>`
        console.log("d: ", d)
      }
      else if (d.estado == 2) {
        table_content += `<td> <p class='status has-background-danger'>Denied</p></td>
        </tr>`
      }
      // Contenido desplegable
      table_content += `<tr class="additional-row" id="additional-row-${idx}" style="display: none;">
                          <td colspan='6'>
                            <div class='columns'>
                              <div class="column is-half">
                                <p><strong>Type: </strong>${d.tipo_falta}</p>
                              </div>
                              <div class="column">
                                <p><strong>Reason: </strong></p>
                                <p class='has-background-black p-3 box'>${d.descripcion}</p>
                                ${d.evidencia ? 'evidencia' : 'no hay evidencia'}
                              </div>
                              <div class="column">
                                <p><strong>Location:</strong></p>
                                <p class='is-underlined	'>${d.ubicacion}</p>
                                <p class="message-approved">Approved by: ${data.collab[idx] == 0 ? "Hasn't been approved" : data.collab[idx][0].nombre + " " + data.collab[idx][0].apellidos}  </p>
                              </div>
                            </div>
                          </td>
                        </tr>`;
      table.innerHTML = table_content
    })
    table_content += '</tbody>'
    table.innerHTML = table_content

    // Añade función para expandir el contenido extra
    const entries = document.querySelectorAll('#request')
    entries.forEach((node, idx) => {
      node.addEventListener('click', (v) => {
        if (v.target.classList.contains('bi-check-circle') || v.target.classList.contains('bi-x-circle')) {
          accept_deny(v.target)
          return 
        }
        
        const additionalRow = document.getElementById(`additional-row-${idx}`)
        const caret = document.querySelector('#caret')
        
        // hacer que en los botones de aceptar o rechazar no se expanda la vista
        // Si el elemento clickeado (v.target -> elemento exacto en el que ocurrió) tiene la clase "accept-icon" o "deny-icon", el código detiene la ejecución con return para que la fila no se expanda.
        if(v.target.classList.contains("accept-icon") || v.target.classList.contains("deny-icon")){
          return;
        }

        if (additionalRow.style.display === "none") {
          additionalRow.style.display = "table-row";
          caret.classList.add('bi-caret-down-fill')
          caret.classList.remove('bi-caret-right-fill')

          // const calendarEl = document.getElementById(`calendar_${idx}`)
          // const calendar = new FullCalendar.Calendar(calendarEl, {
          //   initialView: 'dayGridMonth',
          //   initialDate: data.requests[0][idx].start.split('T')[0],
          //   events: [
          //     {
          //       start: data.requests[0][idx].start.split('T')[0],
          //       end: data.requests[0][idx].end.split('T')[0],
          //       display: 'background',
          //       backgroundColor: '#635d991' 
          //     }
          //   ],
          // })
          // calendar.render()
        } else {
          additionalRow.style.display = "none";

          caret.classList.remove('bi-caret-down-fill')
          caret.classList.add('bi-caret-right-fill')
        }
      })
    })

    document.querySelectorAll(".approve").forEach((button) => {
      button.addEventListener("click", function () {
        const postId = this.getAttribute("data-id"); 
        const newValue = this.getAttribute("value"); 

        Swal.fire({
          title: "Are you sure?",
          text: `Do you want to set this to ${Number(newValue) === 2 ?  "Deny" : "Accept" }?`,
          icon: "question",
          showCancelButton: true,
          confirmButtonColor: `${Number(newValue) === 2 ?  "#B8453E" : "#59A250"}`,
          cancelButtonColor: "#7066E0",
          confirmButtonText: "Yes, update it!"
        }).then((result) => {
          if (result.isConfirmed) {
            updateField(postId, newValue);
            get_info();
          }
        });
      });
    });

    function showCollabApprove(){
      const csrf = document.getElementById('_csrf').value;
      const selected_option = document.querySelector('.selected');
      const route = selected_option.innerHTML;

      fetch(`/requests/${route}`, {
        method: 'GET',
      })
      .then(response => {
        return response.json()
      })
      .catch(e => console.error("error", e));
    }

    function updateField(postId, newValue) {
      const csrf = document.getElementById('_csrf').value
      fetch(`/requests/Requests/update`, {
        method: "POST", 
        headers: {
          "Content-Type": "application/json",
          'csrf-token': csrf,
        },
        body: JSON.stringify({ 
          estado: newValue,
          id_solicitud_falta : postId
        }), 
      })
        .then(() => {
          Swal.fire({
            title: "Updated!",
            text: `The request has been updated.`,
            icon: "success",
          });

        })
        .catch((error) => {
          Swal.fire({
            title: "Error!",
            text: "There was a problem updating the field.",
            icon: "error",
          });
          console.error("Update error:", error);
        });
    }
  }

  // Consulta a db para la información de solicitudes
  const get_info = (pagination=0, filter=null) => {
    const csrf = document.getElementById('_csrf').value
    const selected_option = document.querySelector('.selected')
    const route = selected_option.innerHTML
    fetch(`/requests/${route}`, {
      method: 'POST',
      headers: {
            'Content-Type': 'application/json',
            'csrf-token': csrf
        },
      body: JSON.stringify({
        offset: pagination,
        filter: filter,
      }),
    })
    .then(response => response.json())
    .then(data => {
      createTableRequests(data)
    })
    .catch(e => console.error(e))
  }

  // Permite cambiar entre pestañas
  const options = document.querySelectorAll(".option")
  for (let i=0; i<options.length; i++) {  
    options[i].addEventListener('click', (b) => {
      options.forEach((element) => {
        element.classList.remove('selected')
      })
      options[i].classList.add('selected')
      pagination_value.value = 1
      get_info()
    })
  }

  const prev_button = document.querySelector("#prev-page");
  const next_button = document.querySelector("#next-page");
  const pagination_value = document.querySelector("#pagination");

  // Cambiar de página / ver los siguientes 10 registros
  prev_button.addEventListener('click', () => {
    pagination_value.value = 
    pagination_value.value - 1 <= 1 ? 1 : pagination_value.value - 1
    
    pagination_value.dispatchEvent(new Event('change'));
  })

  next_button.addEventListener('click', () => {
    pagination_value.value = Number(pagination_value.value) + 1
    
    pagination_value.dispatchEvent(new Event('change'));
  })
  pagination_value.addEventListener('change', (v) => {
    get_info(pagination_value.value-1, filter_options ?? null)
  })
</script>