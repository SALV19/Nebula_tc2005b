<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>

  function my_formatDate(date) {
    const d = new Date(date);
    const day = String(d.getDate()).padStart(2, '0');
    const month = String(d.getMonth() + 1).padStart(2, '0'); 
    const year = d.getFullYear();
    
    return `${day}/${month}/${year}`;
  }
  function createEmpty() {
    const table = document.querySelector('#requests_table')
    table.innerHTML = `<tr>
                        <div class="is-fullwidth is-flex is-justify-content-center">No Data</div>
                      </tr>`
  }
  function accept_deny(element) {
    // is checkmark
    if (element.classList.contains('bi-check-circle')) {
      console.log('Accept request')
    }
    else {
      console.log('Deny request')
    }
  }
  function createCalendarElement(id) {
    return `<div class="cal-modal-container is-flex is-justify-content-center mb-2">
              <div class="cal-modal">
                <h3>UPCOMING EVENTS</h3>
                <div id="calendar-${id}">
                  <div class="placeholder"></div>
                  <div class="calendar-events">
                  </div>
                </div>
              </div>
            </div>` 
  }
  // Crea el contenido de la tabla para solicitudes
  function createTableRequests(data) {
    const table = document.querySelector('#requests_table')
    let table_content = `<thead>
                            <tr>
                              <th >Name</th>
                              <th >Start-date</th>
                              <th >End-date</th>
                              <th >Request-type</th>
                              <th >Status</th>
                              <th >Action</th>
                            </tr>
                          </thead>
                          <tbody >`

    // Información por cada renglón de la tabla
    data.requests[0].forEach((d, idx) => {
      table_content += `<tr id='request' key='${idx}'>`;
      table_content += `<td class='py-2'><i class="bi bi-caret-right-fill" id='caret-${idx}'></i> ${d.nombre} ${d.apellidos}</td>`
      table_content += `<td>${my_formatDate(d.start)}</td>`
      table_content += `<td>${my_formatDate(d.end)}</td>`
      table_content += `<td>${d.tipo_falta}</td>`
      if (d.estado == 0) {
        table_content += `<td> <p class='status has-background-warning'>Pending...</p></td>
         <td>
            <button class="approve" type="submit" name="estado" data-id="${d.id_solicitud_falta}" value="1">
              <i class="bi bi-check-circle is-size-5 is-clickable has-text-primary mr-4 accept-icon" data-id="${d.id}"></i>  
            </button>
            <button class="approve" type="submit" name="estado" value="2" data-id="${d.id_solicitud_falta}">
              <i class="bi bi-x-circle is-size-5 is-clickable has-text-danger deny-icon" data-id="${d.id}"></i>
            </button>
          </td>
          </tr>`
      }
      else if (d.estado == 1) {
        table_content += `<td> <p class='status has-background-success'>Accepted</p></td>
        <td class="back"></td>
        </tr>
`
      }
      else if (d.estado == 2) {
        table_content += `<td> <p class='status has-background-danger'>Denied</p></td>
        </tr>`
      }
      // Contenido desplegable
      table_content += `<tr class="additional-row" id="additional-row-${idx}" style="display: none;">
                          <td colspan='6'>
                            <div class='columns'>
                              <div class="column is-two-fifths">
                                <p><strong>Type: </strong>${d.tipo_falta}</p>`
      table_content += createCalendarElement(idx)
      table_content +=  `</div>
                              <div class="column ">
                                <p><strong>Reason: </strong></p>
                                <p class='custom-textarea box'>${d.descripcion}</p>
                                ${d.evidencia ? `<a class="button is-link is-light" href="${d.evidencia}"><i class="bi bi-link-45deg"></i> Evidence</a>` : ``}
                              </div>
                              <div class="column">
                                <p><strong class='has-event'>Location: </strong>${d.ubicacion}</p>
                              </div>
                            </div>
                          </td>
                        </tr>`;
    })
    table_content += '</tbody>'
    table.innerHTML = table_content

    data.requests[0].forEach((d, idx) => {
      createCalendar(idx, get_inbetween_dates(d.start, d.end))
    })


    // Añade función para expandir el contenido extra
    const entries = document.querySelectorAll('#request')
    entries.forEach((node, idx) => {
      node.addEventListener('click', (v) => {
        if (v.target.classList.contains('bi-check-circle') || v.target.classList.contains('bi-x-circle')) {
          accept_deny(v.target)
          return 
        }
        
        const additionalRow = document.getElementById(`additional-row-${idx}`)
        const caret = document.querySelector(`#caret-${idx}`)
        
        // hacer que en los botones de aceptar o rechazar no se expanda la vista
        // Si el elemento clickeado (v.target -> elemento exacto en el que ocurrió) tiene la clase 
        // "accept-icon" o "deny-icon", el código detiene la ejecución con return para que la fila no se expanda.
        if(v.target.classList.contains("accept-icon") || v.target.classList.contains("deny-icon")){
          return;
        }

        if (additionalRow.style.display === "none") {
          additionalRow.style.display = "table-row";
          caret.classList.add('bi-caret-down-fill')
          caret.classList.remove('bi-caret-right-fill')
        } else {
          additionalRow.style.display = "none";

          caret.classList.remove('bi-caret-down-fill')
          caret.classList.add('bi-caret-right-fill')
        }
      })
    })

    document.querySelectorAll(".approve").forEach((button) => {
      button.addEventListener("click", function () {
        const postId = this.getAttribute("data-id"); 
        const newValue = this.getAttribute("value"); 

        Swal.fire({
          title: "Are you sure?",
          text: `Do you want to set this to ${Number(newValue) === 1 ? "Accept" : "Deny"}?`,
          icon: "question",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "Yes, update it!"
        }).then((result) => {
          if (result.isConfirmed) {
            console.log('ID solicitud:',postId, ' Nuevo valor:', newValue); 
            updateField(postId, newValue);
            get_info();
          }
        });
      });
    });

    function updateField(postId, newValue) {
      const csrf = document.getElementById('_csrf').value
      fetch(`/requests`, {
        method: "POST", 
        headers: {
          "Content-Type": "application/json",
          'csrf-token': csrf,
        },
        body: JSON.stringify({ 
          estado: newValue,
          id_solicitud_falta : postId
        }), 
      })
        .then(() => {
          Swal.fire({
            title: "Updated!",
            text: `The request has been updated.`,
            icon: "success",
          });

        })
        .catch((error) => {
          Swal.fire({
            title: "Error!",
            text: "There was a problem updating the field.",
            icon: "error",
          });
          console.error("Update error:", error);
        });
    }


  }

  // Consulta a db para la información de solicitudes
  const get_info = (pagination=0, filter=null) => {
    const csrf = document.getElementById('_csrf').value
    const selected_option = document.querySelector('.selected')
    const route = selected_option.innerHTML
    return fetch(`/requests/${route}`, {
      method: 'POST',
      headers: {
            'Content-Type': 'application/json',
            'csrf-token': csrf
        },
      body: JSON.stringify({
        offset: pagination,
        filter: filter,
      }),
    })
    .then(response => response.json())
    .then(data => {
      if (data.requests[0].length <= 0) {
        createEmpty()
        return 0
      }
      createTableRequests(data)
      return data.requests[0].length
    })
    .catch(e => console.error(e))
  }
  
  // Permite cambiar entre pestañas
  const options = document.querySelectorAll(".option")
  for (let i=0; i<options.length; i++) {  
    options[i].addEventListener('click', (b) => {
      options.forEach((element) => {
        element.classList.remove('selected')
      })
      options[i].classList.add('selected')
      pagination_value.value = 1
      get_info()
    })
  }

  const prev_button = document.querySelector("#prev-page");
  const next_button = document.querySelector("#next-page");
  const pagination_value = document.querySelector("#pagination");

  // Cambiar de página / ver los siguientes 10 registros
  prev_button.addEventListener('click', () => {
    pagination_value.value = 
    pagination_value.value - 1 <= 1 ? 1 : pagination_value.value - 1
    
    pagination_value.dispatchEvent(new Event('change'));
  })

  next_button.addEventListener('click', () => {
    pagination_value.value = Number(pagination_value.value) + 1
    
    pagination_value.dispatchEvent(new Event('change'));
  })
  pagination_value.addEventListener('change', async (v) => {
    const content = await get_info(pagination_value.value-1, filter_options ?? null)
    if (content <= 0) {
      pagination_value.value = pagination_value.value -1;
    }
  })
</script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<script>
  
  function createCalendar(id, dates) {
    let eventDates = {}
    dates.forEach((d) => {
      eventDates[d] = ['']
    })


    let flatpickrInstance = $(`#calendar-${id} .placeholder`).flatpickr({
      inline: true,
      showMonths: 1,
      disableMobile: "true",
      defaultDate: dates[0],
      onChange: function(date, str, inst) {
      },
      locale: {
        weekdays: {
          shorthand: ["S", "M", "T", "W", "T", "F", "S"],
          longhand: [
            "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday",
          ]
        }
      },
      onDayCreate: function(dObj, dStr, fp, dayElem) {
        let dateStr = formatDate(new Date(dayElem.dateObj));
        if (eventDates[dateStr]) {
          dayElem.classList.add("my_event"); 
          if (dateStr == dates[0] || dateStr == dates.at(-1)) {
            dayElem.style.backgroundColor = '#B7A5E6'
            dayElem.style.borderRadius = '10px'
          }
          else {
            dayElem.style.backgroundColor = 'rgba(183, 165, 230, 0.6)'
            dayElem.style.borderRadius = '10px'
          }
        }
      }
    });    
  }

  function eventCaledarResize($el) {
    let width = $el.width()
    flatpickr.set('showMonths', 1)
    flatpickr.set('maxDate', maxDate[1])
    $('.flatpickr-calendar').css('width', '')
  }

  function formatDate(date) {
    let d = date.getDate();
    let m = date.getMonth() + 1; //Month from 0 to 11
    let y = date.getFullYear();
    return '' + y + '-' + (m<=9 ? '0' + m : m) + '-' + (d <= 9 ? '0' + d : d);
  }

</script>