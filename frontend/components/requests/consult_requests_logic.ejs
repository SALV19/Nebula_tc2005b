<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  function eventListeners(data){
      
      const requestType          = document.getElementById("requestType");
      const startDate            = document.getElementById("startDate");
      const endDate              = document.getElementById("endDate");
      const location             = document.getElementById("location");
      const description          = document.getElementById("description");
      const evidenceContainer    = document.getElementById("evidenceContainer");
      const requestForm = document.querySelector("form"); 

      // On change: request type
      requestType.addEventListener("change", () => {
        
        // Check again if evidence is needed
        checkEvidenceRequirement();

        // Update vacation counters and validation
        updateDaysCounter(data);
      });

      // On change: start date
      startDate.addEventListener("change", () => {

        checkEvidenceRequirement();
        updateDaysCounter(data);
      });

      // On change: end date
      endDate.addEventListener("change", () => {

        checkEvidenceRequirement();
        updateDaysCounter(data);
      });

      // On form submit: validate all inputs before allowing submission
      requestForm.addEventListener("submit", function (e) {
        const start = startDate.value;
        const end = endDate.value;
        const location = document.getElementById("location").value.trim();
        const evidenceInput = document.getElementById("evidence");
        const [type, subtype] = requestType.value.split("|");
        const remaining = updateDaysCounter(data);
        const errors = [];

        let validDays = [];

        // Date validations
        if (!start || !end) {
          errors.push("Select the start and end date.");
        } else {
          const startDateObj = new Date(start);
          const endDateObj = new Date(end);

          if (startDateObj > endDateObj) {
            errors.push("The start date cannot be later than the end date.");
          } else {
            validDays = realsDaysOff(start, end);
            
            const allInRange = get_inbetween_dates(start, end);
            const holidaysList = get_holidays();
            const pendingDays = get_pending_days()
            const approvedDays = get_approved_days();

            const empalmeFeriados = allInRange.every(d => holidaysList.includes(d));
            const empalmeAprobados = allInRange.every(d => approvedDays.includes(d));
            const empalmePendientes = allInRange.every(d => pendingDays.includes(d));

            // If no valid days due to full overlap with feriados or aprobados
            if (validDays.length < 1) {
              if (empalmeFeriados) {
                errors.push("All selected dates overlap with holidays.");
              } else if (empalmeAprobados) {
                errors.push("All selected dates overlap with approved requests.");
              } else if (empalmePendientes) {
                errors.push("All selected dates overlap with pending requests.");
              } else {
                errors.push("You are selecting dates that overlap with holidays and approved/pending requests.");
              }
            }

            // Save valid days to hidden input
            document.getElementById("validDaysInput").value = JSON.stringify(validDays);
          }
        }
        
        // Location validation
        if (!location) {
          errors.push("Enter the location.");
        }

        // Evidence validation (only for Absence > 3 valid days)
        const noEvidenceNeeded = ["Vacation", "Mourning", "Emergency", "Family Situation", "Mental rest", "Personal commitment"];

        if (
          type === "Absence" && 
          validDays.length > 3 && 
          !noEvidenceNeeded.includes(subtype) && 
          !evidenceInput.value.trim()
        ) {
          errors.push("Please attach evidence for absences longer than 3 valid days.");
        }

        // Vacation overuse validation
        if (remaining < 0) {
          errors.push("Requesting more vacations than available");
        }

        // Show errors if they exist
        if (errors.length > 0) {
          e.preventDefault();
          showErrorPopup(errors);
        } else {
          
          // We stop the submit to confirm
          e.preventDefault(); 

          Swal.fire({
            title: "Are you sure?",
            text: "You won't be able to revert this!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#59A250",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, save it!",
            cancelButtonText: "Cancel"
          }).then((result) => {
            if (result.isConfirmed) {
              requestForm.submit(); 
            }
          });
        }
      });
    }

  function my_formatDate(date) {
    const d = new Date(date);
    const day = String(d.getDate()).padStart(2, '0');
    const month = String(d.getMonth() + 1).padStart(2, '0'); 
    const year = d.getFullYear();
    
    return `${day}/${month}/${year}`;
  }
  function createEmpty() {
    const table = document.querySelector('#requests_table')
    table.innerHTML = `<tr>
                        <div class="is-fullwidth is-flex is-justify-content-center">No Data</div>
                      </tr>`
  }
  function createCalendarElement(id) {
    return `<div class="cal-modal-container is-flex is-justify-content-center mb-2">
              <div class="cal-modal">
                <h3>UPCOMING EVENTS</h3>
                <div id="calendar-${id}">
                  <div class="placeholder"></div>
                  <div class="calendar-events">
                  </div>
                </div>
              </div>
            </div>` 
  }

  function createTableAbscences(data) {
    const table = document.querySelector('#requests_table')
    let table_content = `<thead>
    <tr>
      <th >Start-date</th>
      <th >End-date</th>
      <th >Request Type</th>
      <th >Status</th>      
    </tr>
  </thead>
  <tbody >`
    // Informaci칩n por cada rengl칩n de la tabla
    data.abscences.forEach((d, idx) => {
      table_content += `<tr id='request' data-key='${d.id_solicitud_falta}'>`;
      table_content += `<td class="is-flex">
                          <i class="bi bi-caret-right-fill mr-4" id='caret-${idx}'></i>
                          <p id="start_date-${d.id_solicitud_falta}">${my_formatDate(d.start)}</p>
                        </td>`
      table_content += `<td id="end_date-${d.id_solicitud_falta}">${my_formatDate(d.end)}</td>`
      table_content += `<td id="tipo_falta-${d.id_solicitud_falta}">${d.tipo_falta}</td>`
      if (d.estado == 0) {
        table_content += `<td> <p class='status has-background-warning'>Pending...</p></td>`
      } else if (d.estado == 0.5) {
        table_content += `<td> <p class='status half-color-button'>Pending...</p></td>`
      }
      else if (d.estado == 1) {
        table_content += `<td> <p class='status has-background-success'>Accepted</p></td>`
      }
      else if (d.estado == 2) {
        table_content += `<td> <p class='status has-background-danger'>Denied</p></td>`
      }
      table_content += `<td style="display: none">
                          <input type='hidden' value='${d.ubicacion}' id="ubicacion-${d.id_solicitud_falta}"/>
                          <input type='hidden' value='${d.descripcion}' id="descripcion-${d.id_solicitud_falta}"/>
                        </td>`
      // Contenido desplegable
      table_content += `<tr class="additional-row has-background" id="additional-row-${idx}" style="display: none;">
                          <td colspan='6'>
                            <div class='columns'>
                              <div class="column is-half">
                                <p><strong>Type: </strong>${d.tipo_falta}</p>`
        table_content += createCalendarElement(idx);
        table_content +=    `</div>
                              <div class="column">
                                <p><strong>Reason: </strong></p>
                                <p class='custom-textarea' id="descripcion-${d.id_solicitud_falta}">${d.descripcion}</p>
                              </div>
                              <div class="column">
                                  <p><strong>Location:</strong> <p id="ubicacion-${d.id_solicitud_falta}">${d.ubicacion}</p>
                                  <p class="message-approved">Approved by: ${data.collab[idx] == 0 ? "Hasn't been approved" : data.collab[idx][0].nombre + " " + data.collab[idx][0].apellidos}  </p>`
        const x = new Date().getTime() + 3 * 24 * 60 * 60 * 1000
        if (!(d.estado > 1 || new Date(d.start).getTime() < x)) {
          table_content += `<div class='is-flex is-justify-content-center'>
                                    <button class="button is-link is-rounded small_btn" onclick="updateRequest(${d.id_solicitud_falta})">Update</button>
                                  </div>`
        }
        table_content += `</div>
                            </div>
                          </td>
                        </tr>`;
      table.innerHTML = table_content
    })
    table_content += '</tbody>'
    table.innerHTML = table_content

    data.abscences.forEach((d, idx) => {
      createCalendar(idx, get_inbetween_dates(d.start, d.end))
    })

    // A침ade funci칩n para expandir el contenido extra
    const entries = document.querySelectorAll('#request')
    entries.forEach((node, idx) => {
      node.addEventListener('click', (v) => {        
        const additionalRow = document.getElementById(`additional-row-${idx}`)
        const caret = document.querySelector(`#caret-${idx}`)
        
        // hacer que en los botones de aceptar o rechazar no se expanda la vista
        // Si el elemento clickeado (v.target -> elemento exacto en el que ocurri칩) tiene la clase "accept-icon" o "deny-icon", el c칩digo detiene la ejecuci칩n con return para que la fila no se expanda.
        if(v.target.classList.contains("accept-icon") || v.target.classList.contains("deny-icon")){
          return;
        }

        if (additionalRow.style.display === "none") {
          additionalRow.style.display = "table-row";
          caret.classList.add('bi-caret-down-fill')
          caret.classList.remove('bi-caret-right-fill')
        } else {
          additionalRow.style.display = "none";

          caret.classList.remove('bi-caret-down-fill')
          caret.classList.add('bi-caret-right-fill')
        }
      })
    })
  }


  // Crea el contenido de la tabla para solicitudes
  function createTableRequests(data) {
    let sesionUsuario = data.sesion.id_colaborador;

    const table = document.querySelector('#requests_table')
    let table_content = `<thead>
                            <tr>
                              <th >Name</th>
                              <th >Start-date</th>
                              <th >End-date</th>
                              <th >Request-type</th>
                              <th >Status</th>
                              <th >Action</th>
                            </tr>
                          </thead>
                          <tbody >`

    // Informaci칩n por cada rengl칩n de la tabla
    data.requests[0].forEach((d, idx) => {
      table_content += `<tr id='request' key='${idx}'>`;
      table_content += `<td ><i class="bi bi-caret-right-fill" id='caret-${idx}'></i> ${d.nombre} ${d.apellidos}</td>`
      table_content += `<td>${my_formatDate(d.start)}</td>`
      table_content += `<td>${my_formatDate(d.end)}</td>`
      table_content += `<td>${d.tipo_falta}</td>`
      if (d.estado == 0) {
        table_content += `<td> <p id="${d.id_solicitud_falta}" class='status has-background-warning'>Pending...</p></td>
         <td>
          <button class="approve" type="submit" name="estado" data-id="${d.id_solicitud_falta}" value="${d.estado + 0.5}">
              <i class="bi bi-check-circle is-size-5 is-clickable has-text-primary mr-4 accept-icon" data-id="${d.id}"></i>  
            </button>
            <button class="approve" type="submit" name="estado" value="2" data-id="${d.id_solicitud_falta}">
              <i class="bi bi-x-circle is-size-5 is-clickable has-text-danger deny-icon" data-id="${d.id}"></i>
            </button>
          </td>
          </tr>`
      } else if (d.estado == 0.5) {
        table_content += `<td> <p id="${d.id_solicitud_falta}" class='status half-color-button'>Pending...</p></td>
         <td>`
          if (data.collab[idx][0].id_colaborador != sesionUsuario) {
            table_content += `<button class="approve" type="submit" name="estado" data-id="${d.id_solicitud_falta}" value="${d.estado + 0.5}">
                  <i class="bi bi-check-circle is-size-5 is-clickable has-text-primary mr-4 accept-icon" data-id="${d.id}"></i>  
                </button>
                <button class="approve" type="submit" name="estado" value="2" data-id="${d.id_solicitud_falta}">
                  <i class="bi bi-x-circle is-size-5 is-clickable has-text-danger deny-icon" data-id="${d.id}"></i>
                </button>
              </td>
              </tr>`
          }
        
      }
      else if (d.estado == 1) {
        table_content += `<td> <p id="${d.id_solicitud_falta}" class='status has-background-success'>Accepted</p></td>
        <td class="back"></td>
        </tr>`
      }
      else if (d.estado == 2) {
        table_content += `<td> <p class='status has-background-danger'>Denied</p></td>
        <td class="back"></td>
        </tr>`
      }
      // Contenido desplegable
      table_content += `<tr class="additional-row has-background" id="additional-row-${idx}" style="display: none;">
                          <td colspan='6'>
                            <div class='columns'>
                              <div class="column is-two-fifths">
                                <p><strong>Type: </strong>${d.tipo_falta}</p>`
      table_content += createCalendarElement(idx)
      table_content +=  `</div>
                              <div class="column ">
                                <p><strong>Reason: </strong></p>
                                <p class='custom-textarea'>${d.descripcion}</p>
                                ${d.evidencia ? `<a class="button is-link is-light" href="${d.evidencia}"><i class="bi bi-link-45deg"></i> Evidence</a>` : ``}
                              </div>
                              <div class="column">
                                <p><strong class='has-event'>Location: </strong>${d.ubicacion}</p>
                                <p class="message-approved">Approved by: ${data.collab[idx] == 0 ? "Hasn't been approved" : data.collab[idx][0].nombre + " " + data.collab[idx][0].apellidos}  </p>
                              </div>
                            </div>
                          </td>
                        </tr>`;
    })
    table_content += '</tbody>'
    table.innerHTML = table_content

    data.requests[0].forEach((d, idx) => {
      createCalendar(idx, get_inbetween_dates(d.start, d.end))
    })


    // A침ade funci칩n para expandir el contenido extra
    const entries = document.querySelectorAll('#request')
    entries.forEach((node, idx) => {
      node.addEventListener('click', (v) => {
        if (v.target.classList.contains('bi-check-circle') || v.target.classList.contains('bi-x-circle')) {
          accept_deny(v.target)
          return 
        }
        
        const additionalRow = document.getElementById(`additional-row-${idx}`)
        const caret = document.querySelector(`#caret-${idx}`)
        
        // hacer que en los botones de aceptar o rechazar no se expanda la vista
        // Si el elemento clickeado (v.target -> elemento exacto en el que ocurri칩) tiene la clase 
        // "accept-icon" o "deny-icon", el c칩digo detiene la ejecuci칩n con return para que la fila no se expanda.
        if(v.target.classList.contains("accept-icon") || v.target.classList.contains("deny-icon")){
          return;
        }

        if (additionalRow.style.display === "none") {
          additionalRow.style.display = "table-row";
          caret.classList.add('bi-caret-down-fill')
          caret.classList.remove('bi-caret-right-fill')
        } else {
          additionalRow.style.display = "none";

          caret.classList.remove('bi-caret-down-fill')
          caret.classList.add('bi-caret-right-fill')
        }
      })
    })

    document.querySelectorAll(".approve").forEach((button) => {
      button.addEventListener("click", function () {
        const postId = this.getAttribute("data-id"); 
        const newValue = this.getAttribute("value"); 

        Swal.fire({
          title: "Are you sure?",
          text: `Do you want to set this to ${Number(newValue) === 2 ?  "Deny" : "Accept" }?`,
          icon: "question",
          showCancelButton: true,
          confirmButtonColor: `${Number(newValue) === 2 ?  "#B8453E" : "#59A250"}`,
          cancelButtonColor: "#7066E0",
          confirmButtonText: "Yes, update it!"
        }).then(async (result) => {
          if (result.isConfirmed) {
            updateField(postId, newValue);
          }
        });
      });
    });

    function showCollabApprove(){
      const csrf = document.getElementById('_csrf').value;
      const selected_option = document.querySelector('.selected');
      const route = selected_option.innerHTML;

      fetch(`/requests/${route}`, {
        method: 'GET',
      })
      .then(response => {
        return response.json()
      })
      .catch(e => console.error("error", e));
    }

    // function to send update filed 
    function updateField(postId, newValue) {
      const csrf = document.getElementById('_csrf').value;
      fetch(`/requests/Requests/update`, {
        method: "POST", 
        headers: {
          "Content-Type": "application/json",
          'csrf-token': csrf,
        },
        body: JSON.stringify({ 
          estado: newValue,
          id_solicitud_falta : postId
        }), 
      }) 
        .then((data) => {
          Swal.fire({
            title: "Updated!",
            text: `The request has been updated.`,
            icon: "success",
          });
          get_info()
          
        })
        .catch((error) => {
          Swal.fire({
            title: "Error!",
            text: "There was a problem updating the field.",
            icon: "error",
          });
          console.error("Update error:", error);
          
        });
        
    }
  }

  function re_format_date(date) {
    let new_date = date.split('/')
    new_date = [new_date[2], new_date[1], new_date[0]].join('-')
    return new_date
  }


  function updateRequest(id) {
    const csrf = document.getElementById('_csrf').value
    const requestPopup = document.getElementById("requestPopup");
    requestPopup.style.display = "flex";

    const selected = document.querySelector(`[id="request"][data-key="${id}"]`);
    const form = document.querySelector('#form_element')
    form.setAttribute('action', '/requests/update_request')

    const request_type_default = document.getElementById(`tipo_falta-${id}`);
    const start_date_default   = document.getElementById(`start_date-${id}` );
    const end_date_default     = document.getElementById(`end_date-${id}`);
    const ubicacion_default    = document.getElementById(`ubicacion-${id}`);
    const descripcion_default  = document.getElementById(`descripcion-${id}`);
    
    const requestType          = document.getElementById("requestType");
    const startDate            = document.getElementById("startDate");
    const endDate              = document.getElementById("endDate");
    const location             = document.getElementById("location");
    const description          = document.getElementById("description");
    const evidenceContainer    = document.getElementById("evidenceContainer");
    const request_id           = document.getElementById('request_id');

    // requestType.value = request_type_default.innerHTML
    startDate.value   = re_format_date(start_date_default.innerHTML)
    endDate.value     = re_format_date(end_date_default.innerHTML)
    location.value    = ubicacion_default.value
    description.value = descripcion_default.value
    request_id.value  = id
    // evidenceContainer.value = null

    
    fetch("/requests/pop_up",{
        
        method:"GET", 
        headers:{"Content-Type": "aplication/json"}
      }).then(response => response.json())
      .then(data =>{
        holidays = data.holidays;
        all_requests = data.all_requests;
        pending_requests = data.pending_requests
        createContent(data)
        requestPopup.style.display = "flex";

        eventListeners(data)
        updateDaysCounter(data);
      }).catch(error=> console.error("Error getting request data:", error));
  }

  // Consulta a db para la informaci칩n de solicitudes
  const get_info = (pagination=0, filter=null) => {
    const csrf = document.getElementById('_csrf').value
    const selected_option = document.querySelector('.selected')
    const route = selected_option.innerHTML
    return fetch(`/requests/${route}`, {
      method: 'POST',
      headers: {
            'Content-Type': 'application/json',
            'csrf-token': csrf
        },
      body: JSON.stringify({
        offset: pagination,
        filter: filter,
      }),
    })
    .then(response => {
      return response.json()
    })
    .then(data => {
      let requests
      if (data.requests) {
        requests = data.requests[0]
      }
      const data_lenght = (requests ?? data.abscences).length
      if (data_lenght <= 0) {
        if (pagination_value.value == 1) {
          createEmpty()
        }
        return 0
      }
      else if (route == 'Requests') {
        createTableRequests(data)
      } 
      else {
        createTableAbscences(data)
      }
      return data_lenght
    })
    .catch(e => console.error(e))
  }

  // Permite cambiar entre pesta침as
  const options = document.querySelectorAll(".option")
  for (let i=0; i<options.length; i++) {  
    options[i].addEventListener('click', (b) => {
      options.forEach((element) => {
        element.classList.remove('selected')
      })
      options[i].classList.add('selected')
      pagination_value.value = 1
      get_info()
    })
  }

  const prev_button = document.querySelector("#prev-page");
  const next_button = document.querySelector("#next-page");
  const pagination_value = document.querySelector("#pagination");

  // Cambiar de p치gina / ver los siguientes 10 registros
  prev_button.addEventListener('click', () => {
    pagination_value.value = 
    pagination_value.value - 1 <= 1 ? 1 : pagination_value.value - 1
    
    pagination_value.dispatchEvent(new Event('change'));
  })

  next_button.addEventListener('click', () => {
    pagination_value.value = Number(pagination_value.value) + 1
    
    pagination_value.dispatchEvent(new Event('change'));
  })
  pagination_value.addEventListener('change', async (v) => {
    const content = await get_info(pagination_value.value-1, filter_options ?? null)
    if (content <= 0) {
      pagination_value.value = pagination_value.value - 1;
    }
  })
</script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<script>
  
  function createCalendar(id, dates) {
    let eventDates = {}
    dates.forEach((d) => {
      eventDates[d] = ['']
    })


    let flatpickrInstance = $(`#calendar-${id} .placeholder`).flatpickr({
      inline: true,
      showMonths: 1,
      disableMobile: "true",
      defaultDate: dates[0],
      onChange: function(date, str, inst) {
      },
      locale: {
        weekdays: {
          shorthand: ["S", "M", "T", "W", "T", "F", "S"],
          longhand: [
            "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday",
          ]
        }
      },
      onDayCreate: function(dObj, dStr, fp, dayElem) {
        let dateStr = formatDate(new Date(dayElem.dateObj));
        if (eventDates[dateStr]) {
          dayElem.classList.add("my_event"); 
          if (dateStr == dates[0] || dateStr == dates.at(-1)) {
            dayElem.style.backgroundColor = '#B7A5E6'
            dayElem.style.borderRadius = '10px'
          }
          else {
            dayElem.style.backgroundColor = 'rgba(183, 165, 230, 0.6)'
            dayElem.style.borderRadius = '10px'
          }
        }
      }
    });    
  }

  function eventCaledarResize($el) {
    let width = $el.width()
    flatpickr.set('showMonths', 1)
    flatpickr.set('maxDate', maxDate[1])
    $('.flatpickr-calendar').css('width', '')
  }

  function formatDate(date) {
    let d = date.getDate();
    let m = date.getMonth() + 1; //Month from 0 to 11
    let y = date.getFullYear();
    return '' + y + '-' + (m<=9 ? '0' + m : m) + '-' + (d <= 9 ? '0' + d : d);
  }

  document.addEventListener('DOMContentLoaded', get_info())

</script>