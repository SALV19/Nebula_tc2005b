<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>  
<script>
    document.addEventListener("DOMContentLoaded", () => {

    // Si get_info necesita el texto del botón, puedes modificarla para recibirlo como parámetro
    function get_info(selectedOption) {
      console.log("Ejecutando get_info con opción:", selectedOption);
      
      // Seleccionar el contenedor donde se mostrará el contenido
      const contentContainer = document.getElementById("content-section");
      if (selectedOption == 'Register'){
        contentContainer.innerHTML = `
          <form id="follow_ups" action="/follow_ups" method="POST">
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
            <div class="column-container">
              <section class='column'>
                <div>
                  <label class="is-size-6 styling" for="collaborators">Employee</label>
                  <select id="collaborators" class="line-input text-style" name="select-collab">
                    <option value="default" disabled selected>Select Collaborator</option>
                    <% if (colaboradores.length > 0) { %>
                      <% for (let i = 0; i < colaboradores.length; i++) { %>
                        <option value="<%= colaboradores[i].id %>">
                          <%= colaboradores[i].nombre + " " + colaboradores[i].apellidos %>
                        </option>
                      <% } %>
                    <% } else { %>
                      <option disabled> No hay colaboradores disponibles </option>
                    <% } %>
                  </select>
                </div>  

                <div>
                  <label class="is-size-6 text-style styling">Date</label>
                  <input class="dateLine" type="date" id="filter_end" name="date-selected"/>
                </div>
                
                <div id="questions-container">
                  <% for(let i = 0; i < questions.length; i++) { %>
                    <div class="question-container">
                      <p class="line-questions">
                        <span><%= questions[i].pregunta %></span>
                        <i class="bi bi-caret-down-fill toggle-icon"></i>
                      </p>
                      <input class="hidden-content" name="answer-question-<%= questions[i].id %>"></input>
                    </div>
                  <% } %>
                </div>
              </section>

              <section class='column'>
                <div class="radar-container">
                  <canvas id="myRadarChart"></canvas>
                </div>

                <div>
                  <% for(let i = 0; i < indicator.length; i++) { %>
                    <div class="container">
                      <p class="progress-text"> <%= indicator[i].indicador %> </p>
                      <input class="progress-bar" name="value-radar-<%= indicator[i].id %>" type="range" min="0" max="5" value="0">
                    </div>
                  <% } %> 
                </div>

                <div class="button-container">
                  <button class="approve-button" type="submit">Submit</button>
                </div>
              </section>
            </div>
          </form>

        `;
        
        document.getElementById("questions-container").addEventListener("click", (event) => {
          if (event.target.classList.contains("toggle-icon")){
            const questionContainer = event.target.closest(".question-container");
            const hiddenContent = questionContainer.querySelector(".hidden-content");
            hiddenContent.classList.toggle("show");
          }
        })


        const progressBars = document.querySelectorAll(".progress-bar");
        console.log(progressBars);
        const progressTexts = document.querySelectorAll(".progress-text");
        console.log(progressTexts);
        const indicatorLabels = [];
        for (let i = 0; i < progressTexts.length; i++){
          indicatorLabels.push(progressTexts[i].textContent.trim());
        }
        console.log(indicatorLabels);

        let indicatorValues = new Array(indicatorLabels.length).fill(0);
        console.log(indicatorValues);

        const ctx = document.getElementById("myRadarChart").getContext("2d");
        console.log(ctx);
        const radar = new Chart(ctx, { 
          type: 'radar',
          data: {
            labels: indicatorLabels,
            datasets: [{
              data: indicatorValues,
              backgroundColor: "#B7A5E6",
              borderColor: "#EEEEEE",
              borderWidth: 1,
            }]
          },
          options: {
            plugins: {
              legend: {
                display: false // Hide the legend
              }
            },
            scales: {
              r: {
                backgroundColor: "#FFFF",
                hoverBackgroundColor: "#767574",
                angleLines: { display: true },
                suggestedMin: 0,
                suggestedMax: 5,
                ticks: {
                  stepSize: 1,  // Ensures steps of 1
                  beginAtZero: true
                },
                pointLabels: {  
                  color: "#FFFF",  // Changes the label color
                  font: {
                    size: 10,
                    weight: "italic bold"
                  }
                }
              }
            }
          } 
        });
        // console.log('R:', radar);

        function updateChart(){
          radar.data.datasets[0].data = indicatorValues;
          radar.update();
        };

        function updateValues(){
          for (let i = 0; i < progressBars.length; i++){
            indicatorValues[i] = parseInt(progressBars[i].value); 
          }
          updateChart(); 
        };

        for(let i = 0; i < progressBars.length ; i++){
          progressBars[i].addEventListener('input',updateValues);
        };

      }
    }

    // Manejo de selección de pestañas de los botones
    document.querySelectorAll(".option").forEach(option => {
      option.addEventListener("click", (event) => {
        // Eliminar la clase 'selected' de todos
        document.querySelectorAll(".option").forEach(el => el.classList.remove("selected"));

        // Agregar la clase 'selected' al botón clickeado
        option.classList.add("selected");

        // Obtener y mostrar el contenido del botón
        const buttonText = option.textContent.trim();
        console.log("Botón seleccionado:", buttonText);

        // Puedes hacer algo con buttonText, como pasarlo a otra función
        get_info(buttonText);
      });
    });
   
  });
</script>
