<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>  
<script>
    document.addEventListener("DOMContentLoaded", () => {

    // Si get_info necesita el texto del botón, puedes modificarla para recibirlo como parámetro
    function get_info(selectedOption) {
      console.log("Ejecutando get_info con opción:", selectedOption);
      
      // Seleccionar el contenedor donde se mostrará el contenido
      const contentContainer = document.getElementById("content-section");
      if (selectedOption == 'Register'){
        contentContainer.innerHTML = `
          <form action="/follow_ups" method="POST">
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
            <div class="column-container">
              <section class='column'>
                <div name="nombre">
                  <label class="is-size-6 styling" for="collaborators">Employee</label>
                  <select id="collaborators" class="line-input text-style" name="id_colaborador">
                    <option value="default" disabled selected>Select Collaborator</option>
                    <% if (colaboradores.length > 0) { %>

                      <% for (let i = 0; i < colaboradores.length; i++) { %>
                        <option value="<%= colaboradores[i].id_colaborador %>">
                          <%= colaboradores[i].nombre + " " + colaboradores[i].apellidos %>
                        </option>
                      <% } %>
                    <% } else { %>
                      <option disabled> No hay colaboradores disponibles </option>
                    <% } %>

                  </select>
                </div>  

                <div>
                  <label class="is-size-6 styling">Date</label>
                  <input class="dateLine" type="date" id="filter_end" name="fechaAgendada"/>
                </div>
                
                <div id="questions-container">
                  <% for(let i = 0; i < questions.length; i++) { %>
                    <div class="question-container">
                      <p class="line-questions">
                        <span>
                          <%= questions[i].pregunta %>
                        </span>
                        <i class="bi bi-caret-down-fill toggle-icon"></i>
                      </p>

                      <!-- Campo oculto para enviar el ID de la pregunta -->
                      <input type="hidden" name="id_pregunta" value="<%= questions[i].id_pregunta %>">

                      <!-- Campo de entrada para la respuesta -->
                      <input class="hidden-content" name="respuesta" placeholder="Escribe tu respuesta aquí">
                    </div>
                  <% } %>
                </div>

              </section>

              <section class='column'>
                <div class="radar-container">
                  <canvas id="myRadarChart"></canvas>
                </div>

                <div>
                  <% for(let i = 0; i < indicator.length; i++) { %>
                    <div class="container">
                      <p class="progress-text"> <%= indicator[i].indicador %> </p>
                      <input type="hidden" name="id_indicador" value="<%= indicator[i].id_indicador %>">
                      <input class="progress-bar" name="valor_metrica" type="range" min="0" max="5" value="0">
                    </div>

                    <div class="numbers-container">
                      <p class="numbers">
                        0
                      </p>
                      <p class="numbers">
                        1
                      </p>
                      <p class="numbers">
                        2
                      </p>
                      <p class="numbers">
                        3
                      </p>
                      <p class="numbers">
                        4
                      </p>
                      <p class="numbers">
                        5
                      </p>
                    </div>
                  <% } %> 
                </div>

                <div class="button-container">
                  <button class="approve-button" type="submit">Submit</button>
                </div>
              </section>
            </div>
          </form>

        `;

        document.querySelectorAll(".toggle-icon").forEach((toggleIcon) => {
          toggleIcon.addEventListener("click", (event) => {
            const questionContainer = event.target.closest(".question-container");
            const hiddenContent = questionContainer.querySelector(".hidden-content");

            hiddenContent.classList.toggle("show");
          });
        });


        const progressBars = document.querySelectorAll(".progress-bar");
        // console.log(progressBars);
        const progressTexts = document.querySelectorAll(".progress-text");
        // console.log(progressTexts);
        const indicatorLabels = [];
        for (let i = 0; i < progressTexts.length; i++){
          indicatorLabels.push(progressTexts[i].textContent.trim());
        }
        // console.log(indicatorLabels);

        let indicatorValues = new Array(indicatorLabels.length).fill(0);
        // console.log(indicatorValues);

        const ctx = document.getElementById("myRadarChart").getContext("2d");
        const radar = new Chart(ctx, { 
          type: 'radar',
          data: {
            labels: indicatorLabels,
            datasets: [{
              data: indicatorValues,
              backgroundColor: "#B7A5E6",
              borderColor: "#EEEEEE",
              borderWidth: 1,
            }]
          },
          options: {
            plugins: {
              legend: {
                display: false // Hide the legend
              }
            },
            scales: {
              r: {
                backgroundColor: "#FFFF",
                hoverBackgroundColor: "#767574",
                angleLines: { display: true },
                suggestedMin: 0,
                suggestedMax: 5,
                ticks: {
                  stepSize: 1,  // Ensures steps of 1
                  beginAtZero: true
                },
                pointLabels: {  
                  color: "#FFFF",  // Changes the label color
                  font: {
                    size: 10,
                    weight: "italic bold"
                  }
                }
              }
            }
          } 
        });
        
        function updateChart(){
          radar.data.datasets[0].data = indicatorValues;
          radar.update();
        };

        function updateValues(){
          for (let i = 0; i < progressBars.length; i++){
            indicatorValues[i] = parseInt(progressBars[i].value); 
          }
          updateChart(); 
        };

        for(let i = 0; i < progressBars.length ; i++){
          progressBars[i].addEventListener('input',updateValues);
        };

      }
      
      if (selectedOption == 'Meetings') {
        // 1. Agregar el HTML necesario para el calendario
        contentContainer.innerHTML = `
          <div id="demo-desktop-month-view"></div>
        `;
        
        // 2. Verificar si Mobiscroll ya está cargado, si no, cargarlo dinámicamente
        if (typeof mobiscroll === 'undefined') {
          // Crear y añadir la hoja de estilos
          const styleLink = document.createElement('link');
          styleLink.rel = 'stylesheet';
          styleLink.href = 'https://cdnjs.cloudflare.com/ajax/libs/mobiscroll/5.25.1/css/mobiscroll.min.css';
          document.head.appendChild(styleLink);
          
          // Crear y añadir el script de Mobiscroll
          const script = document.createElement('script');
          script.src = 'https://cdnjs.cloudflare.com/ajax/libs/mobiscroll/5.25.1/js/mobiscroll.javascript.min.js';
          
          // Cuando el script termine de cargar, inicializar el calendario
          script.onload = function() {
            initializeCalendar();
          };
          
          document.head.appendChild(script);
        } else {
          // Si Mobiscroll ya está disponible, inicializar el calendario directamente
          initializeCalendar();
        }
        
        // 3. Función para inicializar el calendario cuando Mobiscroll esté listo
        function initializeCalendar() {
          try {
            // Inicializar el calendario
            var inst = mobiscroll.eventcalendar('#demo-desktop-month-view', {
              locale: mobiscroll.localeEs, // Localización en español
              theme: 'ios',               // Tema iOS
              themeVariant: 'light',      // Variante clara del tema
              clickToCreate: false,       // Desactivar creación al hacer clic
              dragToCreate: false,        // Desactivar creación por arrastre
              dragToMove: false,          // Desactivar mover por arrastre
              dragToResize: false,        // Desactivar redimensionamiento por arrastre
              eventDelete: false,         // Desactivar eliminación de eventos
              view: {
                calendar: { labels: true } // Vista de calendario con etiquetas
              },
              onEventClick: function(args) {
                // Mostrar un toast con el título del evento al hacer clic
                mobiscroll.toast({
                  message: args.event.title
                });
              }
            });
            
            // Verificar si la instancia se creó correctamente
            if (inst) {
              // Opción 1: Cargar eventos desde una API
              mobiscroll.getJson(
                'https://trial.mobiscroll.com/events/?vers=5',
                function(events) {
                  inst.setEvents(events);
                },
                'jsonp'
              );
              
              // Opción 2: Alternativamente, puedes usar eventos locales
              /*
              const localEvents = [
                {
                  id: 1,
                  start: new Date(new Date().getFullYear(), new Date().getMonth(), 5),
                  end: new Date(new Date().getFullYear(), new Date().getMonth(), 6),
                  title: 'Reunión de Equipo',
                  color: '#e61d38'
                },
                {
                  id: 2,
                  start: new Date(new Date().getFullYear(), new Date().getMonth(), 15),
                  end: new Date(new Date().getFullYear(), new Date().getMonth(), 18),
                  title: 'Conferencia',
                  color: '#43a047'
                },
                {
                  id: 3,
                  recurring: {
                    repeat: 'weekly',
                    weekDays: 'MO,WE,FR'
                  },
                  title: 'Reunión Semanal',
                  color: '#3949ab'
                },
                {
                  id: 4,
                  start: new Date(),
                  title: 'Hoy - Evento Importante',
                  color: '#f57c00'
                }
              ];
              
              inst.setEvents(localEvents);
              */
            }
          } catch (error) {
            console.error('Error al inicializar el calendario:', error);
          }
        }
      }

      
      
    }

    // Manejo de selección de pestañas de los botones
    document.querySelectorAll(".option").forEach(option => {
      option.addEventListener("click", (event) => {
        // Eliminar la clase 'selected' de todos
        document.querySelectorAll(".option").forEach(el => el.classList.remove("selected"));

        // Agregar la clase 'selected' al botón clickeado
        option.classList.add("selected");

        // Obtener y mostrar el contenido del botón
        const buttonText = option.textContent.trim();
        // console.log("Botón seleccionado:", buttonText);

        get_info(buttonText);
      });
    });

  });
</script>
