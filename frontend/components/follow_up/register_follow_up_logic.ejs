<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>  
<script>
    document.addEventListener("DOMContentLoaded", () => {

    // Si get_info necesita el texto del botón, puedes modificarla para recibirlo como parámetro
    function get_info(selectedOption) {
      console.log("Ejecutando get_info con opción:", selectedOption);
      
      // Seleccionar el contenedor donde se mostrará el contenido
      const contentContainer = document.getElementById("content-section");
      if (selectedOption == 'Register'){
        contentContainer.innerHTML = `
          <form action="/follow_ups" method="POST">
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
            <div class="column-container">
              <section class='column'>
                <div name="nombre">
                  <label class="is-size-6 styling" for="collaborators">Employee</label>
                  <select id="collaborators" class="line-input text-style" name="id_colaborador">
                    <option value="default" disabled selected>Select Collaborator</option>
                    <% if (colaboradores.length > 0) { %>

                      <% for (let i = 0; i < colaboradores.length; i++) { %>
                        <option value="<%= colaboradores[i].id_colaborador %>">
                          <%= colaboradores[i].nombre + " " + colaboradores[i].apellidos %>
                        </option>
                      <% } %>
                    <% } else { %>
                      <option disabled> No hay colaboradores disponibles </option>
                    <% } %>

                  </select>
                </div>  

                <div>
                  <label class="is-size-6 styling">Date</label>
                  <input class="dateLine" type="date" id="filter_end" name="fechaAgendada"/>
                </div>
                
                <div id="questions-container">
                  <% for(let i = 0; i < questions.length; i++) { %>
                    <div class="question-container">
                      <p class="line-questions">
                        <span>
                          <%= questions[i].pregunta %>
                        </span>
                        <i class="bi bi-caret-down-fill toggle-icon"></i>
                      </p>

                      <!-- Campo oculto para enviar el ID de la pregunta -->
                      <input type="hidden" name="id_pregunta" value="<%= questions[i].id_pregunta %>">

                      <!-- Campo de entrada para la respuesta -->
                      <input class="hidden-content" name="respuesta" placeholder="Escribe tu respuesta aquí">
                    </div>
                  <% } %>
                </div>

              </section>

              <section class='column'>
                <div class="radar-container">
                  <canvas id="myRadarChart"></canvas>
                </div>

                <div>
                  <% for(let i = 0; i < indicator.length; i++) { %>
                    <div class="container">
                      <p class="progress-text"> <%= indicator[i].indicador %> </p>
                      <input type="hidden" name="id_indicador" value="<%= indicator[i].id_indicador %>">
                      <input class="progress-bar" name="valor_metrica" type="range" min="0" max="5" value="0">
                    </div>

                    <div class="numbers-container">
                      <p class="numbers">
                        0
                      </p>
                      <p class="numbers">
                        1
                      </p>
                      <p class="numbers">
                        2
                      </p>
                      <p class="numbers">
                        3
                      </p>
                      <p class="numbers">
                        4
                      </p>
                      <p class="numbers">
                        5
                      </p>
                    </div>
                  <% } %> 
                </div>

                <div class="button-container">
                  <button class="approve-button" type="submit">Submit</button>
                </div>
              </section>
            </div>
          </form>

        `;

        document.querySelectorAll(".toggle-icon").forEach((toggleIcon) => {
          toggleIcon.addEventListener("click", (event) => {
            const questionContainer = event.target.closest(".question-container");
            const hiddenContent = questionContainer.querySelector(".hidden-content");

            hiddenContent.classList.toggle("show");
          });
        });


        const progressBars = document.querySelectorAll(".progress-bar");
        // console.log(progressBars);
        const progressTexts = document.querySelectorAll(".progress-text");
        // console.log(progressTexts);
        const indicatorLabels = [];
        for (let i = 0; i < progressTexts.length; i++){
          indicatorLabels.push(progressTexts[i].textContent.trim());
        }
        // console.log(indicatorLabels);

        let indicatorValues = new Array(indicatorLabels.length).fill(0);
        // console.log(indicatorValues);

        const ctx = document.getElementById("myRadarChart").getContext("2d");
        const radar = new Chart(ctx, { 
          type: 'radar',
          data: {
            labels: indicatorLabels,
            datasets: [{
              data: indicatorValues,
              backgroundColor: "#B7A5E6",
              borderColor: "#EEEEEE",
              borderWidth: 1,
            }]
          },
          options: {
            plugins: {
              legend: {
                display: false // Hide the legend
              }
            },
            scales: {
              r: {
                backgroundColor: "#FFFF",
                hoverBackgroundColor: "#767574",
                angleLines: { display: true },
                suggestedMin: 0,
                suggestedMax: 5,
                ticks: {
                  stepSize: 1,  // Ensures steps of 1
                  beginAtZero: true
                },
                pointLabels: {  
                  color: "#FFFF",  // Changes the label color
                  font: {
                    size: 10,
                    weight: "italic bold"
                  }
                }
              }
            }
          } 
        });
        
        function updateChart(){
          radar.data.datasets[0].data = indicatorValues;
          radar.update();
        };

        function updateValues(){
          for (let i = 0; i < progressBars.length; i++){
            indicatorValues[i] = parseInt(progressBars[i].value); 
          }
          updateChart(); 
        };

        for(let i = 0; i < progressBars.length ; i++){
          progressBars[i].addEventListener('input',updateValues);
        };

      }
      
      if (selectedOption == 'Meetings') {
        contentContainer.innerHTML = `
          <div class="meetings-container">
            <h2 class="title is-4">Scheduled Meetings</h2>
            
            <table class="table is-fullwidth">
              <thead>
                <tr>
                  <th>Employee</th>
                  <th>Date</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% if (followUps && followUps.length > 0) { %>
                  <% followUps.forEach(followUp => { %>
                    <tr>
                      <td><%= followUp.nombre_colaborador %> <%= followUp.apellidos_colaborador %></td>
                      <td><%= new Date(followUp.fechaAgendada).toLocaleDateString() %></td>
                      <td><span class="tag <%= followUp.estatus === 'Pendiente' ? 'is-warning' : (followUp.estatus === 'Completado' ? 'is-success' : 'is-danger') %>">
                        <%= followUp.estatus %>
                      </span></td>
                      <td>
                        <div class="buttons is-centered">
                          <a href="/follow_ups/detail/<%= followUp.id_seguimiento %>" class="button is-small is-info">
                            <i class="bi bi-eye"></i>
                          </a>
                          <% if (followUp.estatus === 'Pendiente') { %>
                            <a href="/follow_ups/edit/<%= followUp.id_seguimiento %>" class="button is-small is-primary">
                              <i class="bi bi-pencil"></i>
                            </a>
                          <% } %>
                        </div>
                      </td>
                    </tr>
                  <% }) %>
                <% } else { %>
                  <tr>
                    <td colspan="4" class="has-text-centered">No hay reuniones programadas</td>
                  </tr>
                <% } %>
              </tbody>
            </table>
            
            <div class="meeting-filters mt-4">
              <div class="field is-horizontal">
                <div class="field-label is-normal">
                  <label class="label">Filter by:</label>
                </div>
                <div class="field-body">
                  <div class="field">
                    <div class="control">
                      <div class="select">
                        <select id="statusFilter">
                          <option value="all">All Status</option>
                          <option value="Pendiente">Pending</option>
                          <option value="Completado">Completed</option>
                          <option value="Cancelado">Cancelled</option>
                        </select>
                      </div>
                    </div>
                  </div>
                  <div class="field">
                    <div class="control">
                      <input class="input" type="date" id="dateFilter">
                    </div>
                  </div>
                  <div class="field">
                    <div class="control">
                      <button class="button is-primary" id="applyFilter">Apply Filter</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
        
        // Add event listeners for the filters
        const statusFilter = document.getElementById('statusFilter');
        const dateFilter = document.getElementById('dateFilter');
        const applyFilterBtn = document.getElementById('applyFilter');
        
        if (applyFilterBtn) {
          applyFilterBtn.addEventListener('click', () => {
            const status = statusFilter.value;
            const date = dateFilter.value;
            
            // Filter the table rows based on the selected criteria
            filterMeetings(status, date);
          });
        }
        
        function filterMeetings(status, date) {
          const tableRows = document.querySelectorAll('.meetings-container tbody tr');
          
          tableRows.forEach(row => {
            const rowStatus = row.querySelector('td:nth-child(3) span').textContent.trim();
            const rowDate = row.querySelector('td:nth-child(2)').textContent.trim();
            
            let statusMatch = status === 'all' || rowStatus === status;
            let dateMatch = !date || rowDate === new Date(date).toLocaleDateString();
            
            row.style.display = statusMatch && dateMatch ? '' : 'none';
          });
        }
      }

    }

    // Manejo de selección de pestañas de los botones
    document.querySelectorAll(".option").forEach(option => {
      option.addEventListener("click", (event) => {
        // Eliminar la clase 'selected' de todos
        document.querySelectorAll(".option").forEach(el => el.classList.remove("selected"));

        // Agregar la clase 'selected' al botón clickeado
        option.classList.add("selected");

        // Obtener y mostrar el contenido del botón
        const buttonText = option.textContent.trim();
        // console.log("Botón seleccionado:", buttonText);

        get_info(buttonText);
      });
    });

  });
</script>
