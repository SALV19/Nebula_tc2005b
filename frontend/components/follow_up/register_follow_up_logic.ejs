<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>  
<script>
    document.addEventListener("DOMContentLoaded", () => {
    const contentContainer = document.getElementById("content-section");

    // Si get_info necesita el texto del botón, puedes modificarla para recibirlo como parámetro
    function get_info(selectedOption) {
      console.log("Ejecutando get_info con opción:", selectedOption);
      
      // Seleccionar el contenedor donde se mostrará el contenido
      contentContainer.innerHTML = " ";
      if (selectedOption == 'Register'){
        contentContainer.innerHTML = `
          <form action="/follow_ups" method="POST">
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
            <div class="column-container">
              <section class='column'>
                <div name="nombre">
                  <label class="is-size-6 styling" for="collaborators">Employee</label>
                  <select id="collaborators" class="line-input text-style" name="id_colaborador">
                    <option value="default" disabled selected>Select Collaborator</option>
                    <% if (colaboradores.length > 0) { %>

                      <% for (let i = 0; i < colaboradores.length; i++) { %>
                        <option value="<%= colaboradores[i].id_colaborador %>">
                          <%= colaboradores[i].nombre + " " + colaboradores[i].apellidos %>
                        </option>
                      <% } %>
                    <% } else { %>
                      <option disabled> No hay colaboradores disponibles </option>
                    <% } %>

                  </select>
                  <p id="errorMessage" class="text-hidden"> Select a collaborator </p>
                </div>  

                <div>
                  <label class="is-size-6 styling">Date</label>
                  <input class="dateLine" type="date" id="filter_end" name="fechaAgendada" <%= new Date().toISOString().split('T')[0] %>/>
                  <p id="dateError" class="text-hidden"> Select a valid date </p>

                </div>
                
                <div id="questions-container">
                  <% for(let i = 0; i < questions.length; i++) { %>
                    <div class="question-container">
                      <p class="line-questions">
                        <span>
                          <%= questions[i].pregunta %>
                        </span>
                        <i class="bi bi-caret-down-fill toggle-icon"></i>
                      </p>

                      <!-- Campo oculto para enviar el ID de la pregunta -->
                      <input type="hidden" name="id_pregunta" value="<%= questions[i].id_pregunta %>">

                      <!-- Campo de entrada para la respuesta -->
                      <input class="hidden-content" name="respuesta" placeholder="Escribe tu respuesta aquí">
                    </div>
                  <% } %>
                </div>

                <div class="button-container">
                  <button id="submitButton" class="approve-button" type="submit">Submit</button>
                </div>
              </section>

              </section>

              <section class='column'>
                <div class="radar-container">
                  <canvas id="myRadarChart"></canvas>
                </div>

                <div>
                  <% for(let i = 0; i < indicator.length; i++) { %>
                    <div class="container">
                      <div class="progress-container">
                          <p class="progress-text"> <%= indicator[i].indicador %> </p>
                          <i class="bi bi-info-circle elementBar"></i>
                        </div>

                        <p class="hidden-message showElement dropdown-content" style="display: none;"> 
                          How does the employee feel about their <%= indicator[i].indicador %>?<br>
                          0 = unsatisfied | 5 = satisfied
                        </p>

                        <input type="hidden" name="id_indicador" value="<%= indicator[i].id_indicador %>">
                        <input class="progress-bar" name="valor_metrica" type="range" min="0" max="5" value="0">
                      </div>


                    <div class="numbers-container">
                      <p class="numbers">
                        0
                      </p>
                      <p class="numbers">
                        1
                      </p>
                      <p class="numbers">
                        2
                      </p>
                      <p class="numbers">
                        3
                      </p>
                      <p class="numbers">
                        4
                      </p>
                      <p class="numbers">
                        5
                      </p>
                    </div>
                  <% } %> 
                </div>
            </div>
          </form>
        `;

        // SHOW INPUT BOX FOR QUESTIONS
        document.querySelectorAll(".toggle-icon").forEach((toggleIcon) => {
          toggleIcon.addEventListener("click", (event) => {
            const questionContainer = event.target.closest(".question-container");
            const hiddenContent = questionContainer.querySelector(".hidden-content");

            hiddenContent.classList.toggle("show");
          });
        });


        // RADAR CHART LOGIC AND CREATION
        const progressBars = document.querySelectorAll(".progress-bar");
        // console.log(progressBars);
        const progressTexts = document.querySelectorAll(".progress-text");
        // console.log(progressTexts);
        const indicatorLabels = [];
        for (let i = 0; i < progressTexts.length; i++){
          indicatorLabels.push(progressTexts[i].textContent.trim());
        }
        // console.log(indicatorLabels);

        let indicatorValues = new Array(indicatorLabels.length).fill(0);
        // console.log(indicatorValues);

        const ctx = document.getElementById("myRadarChart").getContext("2d");
        const radar = new Chart(ctx, { 
          type: 'radar',
          data: {
            labels: indicatorLabels,
            datasets: [{
              data: indicatorValues,
              backgroundColor: "#B7A5E6",
              borderColor: "#EEEEEE",
              borderWidth: 1,
            }]
          },
          options: {
            plugins: {
              legend: {
                display: false // Hide the legend
              }
            },
            scales: {
              r: {
                backgroundColor: "#FFFF",
                hoverBackgroundColor: "#767574",
                angleLines: { display: true },
                suggestedMin: 0,
                suggestedMax: 5,
                ticks: {
                  stepSize: 1,  // Ensures steps of 1
                  beginAtZero: true
                },
                pointLabels: {  
                  color: "#FFFF",  // Changes the label color
                  font: {
                    size: 10,
                    weight: "italic bold"
                  }
                }
              }
            }
          } 
        });
        
        function updateChart(){
          radar.data.datasets[0].data = indicatorValues;
          radar.update();
        };

        function updateValues(){
          for (let i = 0; i < progressBars.length; i++){
            indicatorValues[i] = parseInt(progressBars[i].value); 
          }
          updateChart(); 
        };

        for(let i = 0; i < progressBars.length ; i++){
          progressBars[i].addEventListener('input',updateValues);
        };

        //Show info message for progress bars
        const triggerElement = document.querySelectorAll(".elementBar");
        const targetElement = document.querySelectorAll(".showElement");
        triggerElement.forEach((trigger, index) => {
          trigger.addEventListener("mouseover", () => {
            targetElement[index].style.display = "block";
          })

          trigger.addEventListener("mouseout" , () => {
            targetElement[index].style.display = "none";
          })
        })

        // VALIDATE COLLAB AND DATE
        let collaboratorSelect = document.getElementById("collaborators");
        let errorMessage = document.getElementById("errorMessage");
        let submitButton = document.getElementById("submitButton");
        let selectDate = document.getElementById("filter_end");

        let today = new Date(); 
        today.setDate(today.getDate() - 1);  

        let currentDate = today.toISOString().split('T')[0]; 

        console.log('hoy', currentDate); 
        console.log('sel', selectDate.value);  


         // VALIDATE DATE
        selectDate.addEventListener("change", function(){
          if(selectDate.value >= currentDate){
            dateError.classList.remove("show");
          } else {
            dateError.classList.add("show");
          };
        });

         // VALIDATE COLLAB
        collaboratorSelect.addEventListener("change", function(){
          if (collaboratorSelect.value != "default"){
            errorMessage.classList.remove("show");
          } else {
            errorMessage.classList.add("show");
          };
        });

        // VALIDATE FORM
        submitButton.addEventListener("click", function (event) {
          // Validate dates
          if (selectDate.value < currentDate){
            event.preventDefault();
            dateError.classList.add("show");
          } else {
            dateError.classList.remove("show");
          };

          if (collaboratorSelect.value === "default"){
            event.preventDefault();
            errorMessage.classList.add("show");
          } else {
            errorMessage.classList.remove("show");
          };
        });

      }
      else if (selectedOption == 'Collaborators'){
       contentContainer.innerHTML= ` <p> Holaaa </p>`;
      } else {
        contentContainer.innerHTML= ` <p> Looooool </p>`;
      }
    }

    

    // LOGIC FOR THE NAVBAR BUTTONS OF THIS PAGE
    document.querySelectorAll(".option").forEach(option => {
      option.addEventListener("click", (event) => {
        // Eliminar la clase 'selected' de todos
        document.querySelectorAll(".option").forEach(el => el.classList.remove("selected"));

        // Agregar la clase 'selected' al botón clickeado
        option.classList.add("selected");

        // Obtener y mostrar el contenido del botón
        const buttonText = option.textContent.trim();
        // console.log("Botón seleccionado:", buttonText);

        get_info(buttonText);
      });
    });

  });
</script>
