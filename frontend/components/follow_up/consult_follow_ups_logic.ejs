<script>

    // console.log("entro a consult follow ups logic");

function get_progress_color(data, fecha) {
    const indicators = data.metricas[0]
    .filter(metricaObj => metricaObj.id_evaluacion === fecha.id_evaluacion) // Filtrar métricas según la evaluación
    .map(metricaObj => metricaObj.valor_metrica);
    const indicatorSum = indicators
        .reduce((a, b) => {
            return a + b
        });
    
    const indicatorAvg = indicatorSum * 100 / (indicators.length*5);
    if (indicatorAvg >= 75) {
        return 'success';
    }
    else if (indicatorAvg >= 30) {
        return 'warning';
    }
    else {
        return 'danger';
    }

    
}
function get_average_progress(data, fecha) {
    const indicators = data.metricas[0]
    .filter(metricaObj => metricaObj.id_evaluacion === fecha.id_evaluacion) // Filtrar métricas según la evaluación
    .map(metricaObj => metricaObj.valor_metrica);
    if (indicators.length <= 0) {
        return 0;
    }
    const indicatorSum = indicators
        .reduce((a, b) => {
            return a + b
        });
        
    const indicatorAvg = indicatorSum * 100 / (indicators.length*5);

    return indicatorAvg;
}
    
function TableFollowUps(data) {
    const table = document.querySelector('#content-section');
    let table_content = `
    <div class="container-scroll">
        <table class="table is-fullwidth"">
            <tbody>`;

    data.fechasAgendadas.forEach((fecha, idx) => { 
        const indicadorAverage = get_average_progress(data, fecha);       
        table_content += `<tr class="fecha-row" data-index="${idx}">`;
            table_content += `<td style="text-align: left; width: 10px;">
                <i class="bi bi-caret-right-fill toggle-icon" id="caret-${idx}"></i>
                </td>`;

    function formatDate(dateString) {
        const [day, month, year] = dateString.split('-');
                const fullYear = '20' + year;
        return `${day.padStart(2, '0')}/${month.padStart(2, '0')}/${fullYear}`;
    }

    const formattedDate = formatDate(fecha.fechaAgendada);

    if (data.permissions?.includes('consult_followUps')) {
            const completeName = fecha.nombre + ' ' + fecha.apellidos;
            table_content += `<td class="fixed-width"> ${completeName}</td>`;
        }

        table_content += `<td class="fixed-width"> Date: ${formattedDate}</td>`;
        // console.log(fecha.fechaAgendada);             
  // Columna de fecha
        table_content += `<td class='is-flex is-align-items-center'>
                            <span style="margin-right: 2rem; white-space: nowrap;">Average performance</span>
                            <p style="margin-right: 0.5rem; width: auto;">${indicadorAverage}%</p>
                            <div style="width: 20rem;">
                                <div class="progress-bar-consult mr-2 ${get_progress_color(data, fecha)}" style="--completion: ${indicadorAverage}%;"></div>
                            </div>
                        </td>`
        table_content += `</tr>`;

        // Fila adicional oculta por defecto
        table_content += `<tr class="additional-row" id="additional-row-${idx}" style="display: none;">
                            <td colspan="4" class="has-background">
                                <div class="columns">
                                    <!-- Primera columna -->
                                    <div class="column">
                                        <div id="questions-container">`;

                                        const preguntasEvaluacion = data.pregunta[0].filter(pregunta => 
                                            data.respuestas[0].some(respuesta => respuesta.id_evaluacion === fecha.id_evaluacion && respuesta.id_pregunta === pregunta.id_pregunta));

                                        const respuestasEvaluacion = data.respuestas[0].filter(respuesta => respuesta.id_evaluacion === fecha.id_evaluacion);

                                        preguntasEvaluacion.forEach((pregunta, i) => {
                                            const respuesta = respuestasEvaluacion.find(respuesta => respuesta.id_pregunta === pregunta.id_pregunta)?.respuesta || "No hay respuesta";

                                            table_content += `
                                                <div class="question-container">
                                                    <p class="line-questions-viewF toggle-question">
                                                        <span>${pregunta.pregunta}</span>
                                                        <i class="bi bi-caret-down-fill toggle-icon"></i>
                                                    </p>

                                                    <input type="hidden" name="id_pregunta" value="${pregunta.id_pregunta}">
                                                    
                                                    <p class="response-text hidden-content-viewF">${respuesta}</p>
                                                </div>`;
                                        });
        table_content += `           </div>
                                    </div>
                                    <!-- Segunda columna -->
                                    <div class="column">
                                        <div class="radar-containerF">
                                            <canvas class="canvas-viewF" id="chart-${idx}"></canvas> <!-- Aquí el id es dinámico -->
                                        </div>
                                    </div>
                                    <!-- Tercera columna -->
                                    <div class="column is-one-fifth">
                                        Notes
                                        <textarea class="custom-textarea" id="note-${idx}" value="${fecha.notes[idx] ? fecha.notes[idx] : ''}">${fecha.notes[idx] ? fecha.notes[idx] : ''}</textarea>
                                        <button class="button is-success mt-2 mx-6" onclick="registerNote('note-${idx}', ${fecha.id_evaluacion})">Submit</button>
                                    </div>
                                </div>
                            </td>
                            </tr>`;
    });
    table_content += '</tbody></table> </div>';
    table.innerHTML = table_content;

    // Ahora creamos los gráficos para cada fila adicional después de renderizar el contenido
    data.fechasAgendadas.forEach((fecha, idx) => {
        const ctx = document.getElementById(`chart-${idx}`).getContext("2d");

        const indicatorLabels = data.indicadores[0].map(indicadorObj => indicadorObj.indicador);
        const indicatorValues = data.metricas[0]
        .filter(metricaObj => metricaObj.id_evaluacion === fecha.id_evaluacion) // Filtrar métricas según la evaluación
        .map(metricaObj => metricaObj.valor_metrica); // Obtener los valores de las métricas

        new Chart(ctx, { 
            type: 'radar',
            data: {
                labels: indicatorLabels,
                datasets: [{
                    data: indicatorValues,
                    backgroundColor: "#B7A5E6",
                    borderColor: "#EEEEEE",
                    borderWidth: 1,
                }]
            },
            options: {
                backgroundColor: '#454545',
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    r: {
                        backgroundColor: "#454545",
                        hoverBackgroundColor: "#FFFFF",
                        angleLines: { 
                            display: false,
                        },
                        grid: {
                            color: "#EEEEEE" 
                        },
                        suggestedMin: 0,
                        suggestedMax: 5,
                        ticks: {
                            color: '#EEEEEE',
                            backdropColor: '#454545',
                            stepSize: 1,  
                            beginAtZero: true,
                        },
                        pointLabels: {  
                            color: "#FFFF", 
                            font: {
                                size: 13,
                                weight: "italic"
                            }
                        }
                    }
                }
            } 
        });
    });

document.querySelectorAll('.question-container').forEach(questionContainer => {
    const responseText = questionContainer.querySelector(".response-text");
    const icon = questionContainer.querySelector(".toggle-icon");

    // Inicialmente las respuestas están ocultas y las flechas hacia la derecha
    responseText.classList.remove("show");
    icon.classList.remove("bi-caret-down-fill");
    icon.classList.add("bi-caret-right-fill");
});

// Manejo de filas adicionales (mostrar u ocultar la fila mayor y sus respuestas)
document.querySelectorAll('.fecha-row').forEach(row => {
    row.addEventListener('click', () => {
        const idx = row.getAttribute('data-index');
        const additionalRow = document.getElementById(`additional-row-${idx}`);
        const caret = document.getElementById(`caret-${idx}`);
        const questionContainers = additionalRow?.querySelectorAll('.question-container'); // Si la fila adicional existe

        if (additionalRow) {
            const currentDisplay = additionalRow.style.display;
            if (currentDisplay === "none" || currentDisplay === "") {
                additionalRow.style.display = "table-row";  
                caret.classList.remove("bi-caret-right-fill");
                caret.classList.add("bi-caret-down-fill");

                // Cuando la fila mayor se abre, las preguntas deben permanecer como están, sin cerrarse
                questionContainers?.forEach(questionContainer => {
                    const responseText = questionContainer.querySelector(".response-text");
                    const icon = questionContainer.querySelector(".toggle-icon");

                    // No modificamos el estado de las respuestas ni las flechas aquí
                });

            } else {
                additionalRow.style.display = "none"; 
                caret.classList.remove("bi-caret-down-fill");
                caret.classList.add("bi-caret-right-fill");

                // Si la fila mayor se cierra, cerramos todas las respuestas y las flechas apuntan hacia la derecha
                questionContainers?.forEach(questionContainer => {
                    const responseText = questionContainer.querySelector(".response-text");
                    const icon = questionContainer.querySelector(".toggle-icon");

                    responseText.classList.remove("show"); // Ocultar las respuestas
                    icon.classList.remove("bi-caret-down-fill");
                    icon.classList.add("bi-caret-right-fill"); // Flecha hacia la derecha
                });
            }
        } else {
            console.error(`Fila adicional no encontrada para índice: ${idx}`);
        }
    });
});

// Manejo de preguntas (mostrar u ocultar respuestas al hacer clic)
document.querySelectorAll('.toggle-question').forEach(question => {
    question.addEventListener('click', (event) => {
        const questionContainer = event.target.closest(".question-container");
        const responseText = questionContainer.querySelector(".response-text");
        const icon = questionContainer.querySelector(".toggle-icon");

        if (responseText) {
            // Mostrar u ocultar la respuesta
            responseText.classList.toggle("show");

            // Cambiar la flecha de acuerdo al estado de la respuesta
            if (responseText.classList.contains("show")) {
                icon.classList.remove("bi-caret-right-fill");
                icon.classList.add("bi-caret-down-fill"); // Flecha hacia abajo
            } else {
                icon.classList.remove("bi-caret-down-fill");
                icon.classList.add("bi-caret-right-fill"); // Flecha hacia la derecha
            }
        } else {
            console.error("No se encontró el texto de respuesta");
        }
    });
});

}

// Consulta a db para la información de solicitudes
const get_info_FU = ( ) => {
    console.log("entro a get_info_fu");
    const csrf = document.getElementById('_csrf').value
    const selected_option = document.querySelector('.selected')
    const route = selected_option.getAttribute('data-route');
    fetch(`/follow_ups/${route}`, {
    
    method: 'GET',
    headers: {
            'Content-Type': 'application/json',
            'csrf-token': csrf
        },
    })
    .then(response => {
        return response.json()})
    .then(data => {
        TableFollowUps(data)

    })
    .catch(e => console.log(e))
}
</script>