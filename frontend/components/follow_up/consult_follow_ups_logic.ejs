<script>

function get_progress_color(data, fecha) {
    const indicatorSum = data.metricas[0]
    .filter(metricaObj => metricaObj.id_evaluacion === fecha.id_evaluacion) // Filtrar métricas según la evaluación
    .map(metricaObj => metricaObj.valor_metrica)
    .reduce((a, b) => {
        return a + b
    });
    
    const indicatorAvg = indicatorSum * 100 / 25;
    
    if (indicatorAvg >= 75) {
        return 'success';
    }
    else if (indicatorAvg >= 30) {
        return 'warning';
    }
    else {
        return 'danger';
    }

    
}
function get_average_progress(data, fecha) {
    const indicatorSum = data.metricas[0]
    .filter(metricaObj => metricaObj.id_evaluacion === fecha.id_evaluacion) // Filtrar métricas según la evaluación
    .map(metricaObj => metricaObj.valor_metrica)
    .reduce((a, b) => {
        return a + b
    });
    
    const indicatorAvg = indicatorSum * 100 / 25;
    console.log(indicatorAvg)

    return indicatorAvg;
}
    
function TableFollowUps(data) {
    // console.log("data de tabla: ", data);

    const table = document.querySelector('#content-section');
    let table_content = `<div class="container-scroll">
    <table class="table is-fullwidth"">

    
<tbody>`;

    data.fechasAgendadas.forEach((fecha, idx) => { 
        const indicadorAverage = get_average_progress(data, fecha);       
        table_content += `<tr class="fecha-row" data-index="${idx}">`;
        table_content += `<td class="fixed-width"> Date: ${fecha.fechaAgendada}</td>`;  // Columna de fecha
        table_content += `<td><p>${indicadorAverage}%</p><div class="progress-bar-consult mr-2 ${get_progress_color(data, fecha)}" style="--completion: ${indicadorAverage}%"></div></td>`
        table_content += `<td style="text-align: right; width: 10px;">
                        <i class="bi bi-caret-down-fill toggle-icon"></i>
                        </td>`;
        table_content += `</tr>`;

        // Fila adicional oculta por defecto
        table_content += `<tr class="additional-row" id="additional-row-${idx}" style="display: none;">
                            <td colspan="3" class="has-background">
                                <div class="columns">
                                    <!-- Primera columna -->
                                    <div class="column">
                                        <div id="questions-container">`;

                                        const preguntasEvaluacion = data.pregunta[0].filter(pregunta => 
                                            data.respuestas[0].some(respuesta => respuesta.id_evaluacion === fecha.id_evaluacion && respuesta.id_pregunta === pregunta.id_pregunta));

                                        const respuestasEvaluacion = data.respuestas[0].filter(respuesta => respuesta.id_evaluacion === fecha.id_evaluacion);

                                        preguntasEvaluacion.forEach((pregunta, i) => {
                                            const respuesta = respuestasEvaluacion.find(respuesta => respuesta.id_pregunta === pregunta.id_pregunta)?.respuesta || "No hay respuesta";

                                            table_content += `
                                                <div class="question-container">
                                                    <p class="line-questions-viewF toggle-question">
                                                        <span>${pregunta.pregunta}</span>
                                                        <i class="bi bi-caret-down-fill toggle-icon"></i>
                                                    </p>

                                                    <input type="hidden" name="id_pregunta" value="${pregunta.id_pregunta}">
                                                    
                                                    <p class="response-text hidden-content-viewF">${respuesta}</p>
                                                </div>`;
                                        });
        table_content += `           </div>
                                    </div>
                                    <!-- Segunda columna -->
                                    <div class="column">
                                        <div class="radar-containerF">
                                            <canvas class="canvas-viewF" id="chart-${idx}"></canvas> <!-- Aquí el id es dinámico -->
                                        </div>
                                    </div>
                                    <!-- Tercera columna -->
                                    <div class="column is-one-fifth">
                                        Notes
                                        <textarea class="custom-textarea"></textarea>
                                    </div>
                                </div>
                            </td>
                            </tr>`;
    });
    table_content += '</tbody></table> </div>';
    table.innerHTML = table_content;

    // Ahora creamos los gráficos para cada fila adicional después de renderizar el contenido
    data.fechasAgendadas.forEach((fecha, idx) => {
        const ctx = document.getElementById(`chart-${idx}`).getContext("2d");

        const indicatorLabels = data.indicadores[0].map(indicadorObj => indicadorObj.indicador);
        const indicatorValues = data.metricas[0]
        .filter(metricaObj => metricaObj.id_evaluacion === fecha.id_evaluacion) // Filtrar métricas según la evaluación
        .map(metricaObj => metricaObj.valor_metrica); // Obtener los valores de las métricas

        new Chart(ctx, { 
            type: 'radar',
            data: {
                labels: indicatorLabels,
                datasets: [{
                    data: indicatorValues,
                    backgroundColor: "#B7A5E6",
                    borderColor: "#EEEEEE",
                    borderWidth: 1,
                }]
            },
            options: {
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    r: {
                        backgroundColor: "#FFFF",
                        hoverBackgroundColor: "#767574",
                        angleLines: { display: true },
                        suggestedMin: 0,
                        suggestedMax: 5,
                        ticks: {
                            stepSize: 1, 
                            beginAtZero: true
                        },
                        pointLabels: {  
                            color: "#FFFF", 
                            font: {
                                size: 13,
                                weight: "italic"
                            }
                        }
                    }
                }
            } 
        });
    });

    // Manejo de filas adicionales
document.querySelectorAll('.fecha-row').forEach(row => {
    row.addEventListener('click', () => {
        const idx = row.getAttribute('data-index');
        const additionalRow = document.getElementById(`additional-row-${idx}`);
    
        if (additionalRow) {
            const currentDisplay = additionalRow.style.display;
            if (currentDisplay === "none" || currentDisplay === "") {
                additionalRow.style.display = "table-row";  
            } else {
                additionalRow.style.display = "none"; 
                const questionContainers = additionalRow.querySelectorAll('.response-text');
                questionContainers.forEach(responseText => {
                    responseText.classList.remove('show'); 
                });
            }
        } else {
            console.error(`Fila adicional no encontrada para índice: ${idx}`);
        }
    });
});

    // Manejo de preguntas (mostrar u ocultar respuestas)
    document.querySelectorAll('.toggle-question').forEach(question => {
        question.addEventListener('click', (event) => {
            const questionContainer = event.target.closest(".question-container");
            const responseText = questionContainer.querySelector(".response-text");

            if (responseText) {
                responseText.classList.toggle("show");
            } else {
                console.error("No se encontró el texto de respuesta");
            }
        });
    });
}

// Consulta a db para la información de solicitudes
const get_info_FU = (pagination=0, filter=null) => {
    const csrf = document.getElementById('_csrf').value
    const selected_option = document.querySelector('.selected')
    const route = selected_option.innerHTML
    fetch(`/follow_ups/${route}`, {
    method: 'POST',
    headers: {
            'Content-Type': 'application/json',
            'csrf-token': csrf
        },
    body: JSON.stringify({
        offset: pagination,
        filter: filter,
    }),
    })
    .then(response => {
        return response.json()})
    .then(data => {
        TableFollowUps(data)

    })
    .catch(e => console.log(e))
}


const prev_button = document.querySelector("#prev-page");
const next_button = document.querySelector("#next-page");
const pagination_value = document.querySelector("#pagination");

// Cambiar de página / ver los siguientes 10 registros
prev_button.addEventListener('click', () => {
    pagination_value.value = 
    pagination_value.value - 1 <= 1 ? 1 : pagination_value.value - 1
    
    pagination_value.dispatchEvent(new Event('change'));  // Simula el cambio de valor
})

// Evento para el botón "Siguiente"
next_button.addEventListener('click', () => {
    pagination_value.value = Number(pagination_value.value) + 1
    
    pagination_value.dispatchEvent(new Event('change'));  // Simula el cambio de valor
})

// Evento para cambiar de página manualmente
pagination_value.addEventListener('change', () => {
    const pageNumber = Number(pagination_value.value);
    const offset = (pageNumber - 1) * 10;  // Si tienes 10 registros por página
    get_info_FU(offset);  // Llama a la función con el offset
})
</script>