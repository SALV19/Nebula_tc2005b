@startuml ResetPasswordCode
autonumber
actor Usuario as u
boundary log_in.routes as lgr
boundary reset_password.ejs as rpe
control reset_password.controller as rpc
entity bcrypt as hash
entity reset_password.model as rpm
database Nebula as db
boundary email_service as email

' --- El usuario solicita restablecer contraseña ---
activate u
u -> lgr : GET /forgot_password
deactivate u

activate lgr
lgr -> rpc : render("reset_password_request")
deactivate lgr
activate rpc
rpc -> rpe : HTML reset_password.ejs
deactivate rpc
activate rpe
rpe -> u : Formulario para ingresar correo
deactivate rpe

activate u
u -> lgr : POST /forgot_password (email)
deactivate u

' --- Verificación del correo ---
activate lgr
lgr -> rpc : checkUserExists(user_email)
deactivate lgr
activate rpc
rpc -> rpm : buscarEmail(user_email)
activate rpm
rpm -> db : SELECT email FROM Colaboradores WHERE email = user_email
activate db
db -->> rpm : [email válido o inválido]
deactivate db
rpm -->> rpc : Validación del email
deactivate rpm

rpc -> u : Correo no encontrado (si no existe)
deactivate rpc

' --- Generar y enviar código de verificación ---
rpc -> rpc : generateVerificationCode()
rpc -> rpm : storeVerificationCode(user_email, code, expiration)
activate rpm
rpm -> db : INSERT INTO VerificationCodes (email, code, expiration)
activate db
db -->> rpm : Código almacenado
deactivate db
rpm -->> rpc : Código guardado
deactivate rpm

rpc -> email : sendEmail(user_email, verification_code)
activate email
email -->> rpc : Correo enviado
deactivate email

rpc -> u : Mostrar interfaz para ingresar código
deactivate rpc

' --- El usuario ingresa el código recibido ---
activate u
u -> lgr : POST /verify_code (email, code)
deactivate u

activate lgr
lgr -> rpc : verifyCode(user_email, code)
deactivate lgr
activate rpc
rpc -> rpm : checkVerificationCode(user_email, code)
activate rpm
rpm -> db : SELECT code FROM VerificationCodes WHERE email = user_email AND expiration > NOW()
activate db
db -->> rpm : Código válido o inválido
deactivate db
rpm -->> rpc : Validación de código
deactivate rpm

rpc -> u : Código incorrecto (si no coincide)
deactivate rpc

' --- Si el código es válido, el usuario establece nueva contraseña ---
rpc -> rpc : Mostrar formulario para nueva contraseña
rpc -> rpe : render("set_new_password")
deactivate rpc
activate rpe
rpe -> u : Formulario para nueva contraseña
deactivate rpe

activate u
u -> lgr : POST /set_new_password (email, new_password)
deactivate u

activate lgr
lgr -> rpc : hash(new_password)
deactivate lgr
activate hash
hash -->> rpc : hashed_password
deactivate hash

rpc -> rpm : updateUserPassword(email, hashed_password)
activate rpm
rpm -> db : UPDATE Colaboradores SET password = hashed_password WHERE email = email
activate db
db -->> rpm : Confirmación de actualización
deactivate db
rpm -->> rpc : Contraseña actualizada
deactivate rpm

' --- Eliminar el código usado ---
rpc -> rpm : deleteVerificationCode(user_email)
activate rpm
rpm -> db : DELETE FROM VerificationCodes WHERE email = user_email
activate db
db -->> rpm : Código eliminado
deactivate db
rpm -->> rpc : Eliminación confirmada
deactivate rpm

rpc -> u : Mostrar mensaje de éxito y redirigir a inicio de sesión
deactivate rpc

@enduml
